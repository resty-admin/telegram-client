import { Start, Update } from "nestjs-telegraf";
import { STICKERS } from "src/app/shared/constants";

import { environment } from "../../../../environments/environment";
import { IStateContext } from "../../../shared";

const text = `–ü—Ä–∏–≤—ñ—Ç üëãüèº
–Ø - —Ç–≤—ñ–π –æ–Ω–ª–∞–π–Ω –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç, Resty!

–•–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç—ñ–ª —É –∑–∞–∫–ª–∞–¥—ñ, —á–∏ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π —Å–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ —Å–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫?

–Ø —Ç—É—Ç –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ üôåüèº`;

@Update()
export class BotUpdate {
	@Start()
	async start(context: IStateContext) {
		if (environment.production) {
			await context.replyWithSticker(STICKERS.hello);
		}

		const endQuery = `${context.startPayload?.includes("?") ? "&" : "?"}from=telegram`;

		await context.reply(text, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ü–æ—á–∞—Ç–∏", web_app: { url: `${environment.appUrl}${context.startPayload}${endQuery}` } }]
				]
			}
		});
	}
}
